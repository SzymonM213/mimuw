diff '--color=auto' -rupNEZbB minix_source_clean/usr/src/include/unistd.h minix_source/usr/src/include/unistd.h
--- minix_source_clean/usr/src/include/unistd.h	2014-09-13 23:56:50.000000000 +0200
+++ minix_source/usr/src/include/unistd.h	2023-06-03 21:06:01.426372340 +0200
@@ -69,6 +69,7 @@
 #include <sys/featuretest.h>
 #include <sys/types.h>
 #include <sys/unistd.h>
+#include <stdbool.h>
 
 #if _FORTIFY_SOURCE > 0
 #include <ssp/unistd.h>
@@ -411,5 +412,7 @@ extern	 int optreset;		/* getopt(3) exte
 extern	 char *suboptarg;	/* getsubopt(3) external variable */
 #endif
 
+int sched_deadline(int64_t deadline, int64_t estimate, bool kill);
+
 __END_DECLS
 #endif /* !_UNISTD_H_ */
diff '--color=auto' -rupNEZbB minix_source_clean/usr/src/lib/libc/misc/Makefile.inc minix_source/usr/src/lib/libc/misc/Makefile.inc
--- minix_source_clean/usr/src/lib/libc/misc/Makefile.inc	2014-09-13 23:56:50.000000000 +0200
+++ minix_source/usr/src/lib/libc/misc/Makefile.inc	2023-06-03 21:26:23.166354853 +0200
@@ -7,4 +7,4 @@
 SRCS+=	initfini.c
 
 # for -fstack-protector
-SRCS+=	stack_protector.c
+SRCS+=	stack_protector.c sched_deadline.c
diff '--color=auto' -rupNEZbB minix_source_clean/usr/src/lib/libc/misc/sched_deadline.c minix_source/usr/src/lib/libc/misc/sched_deadline.c
--- minix_source_clean/usr/src/lib/libc/misc/sched_deadline.c	1970-01-01 01:00:00.000000000 +0100
+++ minix_source/usr/src/lib/libc/misc/sched_deadline.c	2023-06-04 19:36:18.971493880 +0200
@@ -0,0 +1,11 @@
+#include <unistd.h>
+#include <lib.h>
+
+int sched_deadline(int64_t deadline, int64_t estimate, bool kill) {
+    message m;
+    m.m_sched_deadline.who = getpid();
+    m.m_sched_deadline.deadline = deadline;
+    m.m_sched_deadline.estimate = estimate;
+    m.m_sched_deadline.kill = kill;
+    return _syscall(PM_PROC_NR, PM_SCHED_DEADLINE, &m);
+}
\ No newline at end of file
diff '--color=auto' -rupNEZbB minix_source_clean/usr/src/minix/include/minix/callnr.h minix_source/usr/src/minix/include/minix/callnr.h
--- minix_source_clean/usr/src/minix/include/minix/callnr.h	2014-09-13 23:56:50.000000000 +0200
+++ minix_source/usr/src/minix/include/minix/callnr.h	2023-06-03 20:22:30.656410358 +0200
@@ -58,8 +58,9 @@
 #define PM_GETEPINFO		(PM_BASE + 45)
 #define PM_GETPROCNR		(PM_BASE + 46)
 #define PM_GETSYSINFO		(PM_BASE + 47)
+#define PM_SCHED_DEADLINE	(PM_BASE + 48)
 
-#define NR_PM_CALLS		48	/* highest number from base plus one */
+#define NR_PM_CALLS		49	/* highest number from base plus one */
 
 /*===========================================================================*
  *				Calls to VFS				     *
diff '--color=auto' -rupNEZbB minix_source_clean/usr/src/minix/include/minix/com.h minix_source/usr/src/minix/include/minix/com.h
--- minix_source_clean/usr/src/minix/include/minix/com.h	2014-09-13 23:56:50.000000000 +0200
+++ minix_source/usr/src/minix/include/minix/com.h	2023-06-04 08:00:36.980666129 +0200
@@ -763,6 +763,7 @@
 #define SCHEDULING_STOP		(SCHEDULING_BASE+3)
 #define SCHEDULING_SET_NICE	(SCHEDULING_BASE+4)
 #define SCHEDULING_INHERIT	(SCHEDULING_BASE+5)
+#define SCHEDULING_SCHED_DEADLINE (SCHEDULING_BASE+6)
 
 /*===========================================================================*
  *              Messages for USB                                             *
diff '--color=auto' -rupNEZbB minix_source_clean/usr/src/minix/include/minix/config.h minix_source/usr/src/minix/include/minix/config.h
--- minix_source_clean/usr/src/minix/include/minix/config.h	2014-09-13 23:56:50.000000000 +0200
+++ minix_source/usr/src/minix/include/minix/config.h	2023-06-03 20:01:21.826425928 +0200
@@ -66,6 +66,8 @@
 						(should correspond to nice 0) */
 #define MIN_USER_Q	  (NR_SCHED_QUEUES - 1)	/* minimum priority for user
 						   processes */
+#define DEADLINE_Q 	  8    /* deadline queue */
+#define PENALTY_Q     14   /* penalty queue */
 /* default scheduling quanta */
 #define USER_QUANTUM 200
 
diff '--color=auto' -rupNEZbB minix_source_clean/usr/src/minix/include/minix/ipc.h minix_source/usr/src/minix/include/minix/ipc.h
--- minix_source_clean/usr/src/minix/include/minix/ipc.h	2014-09-13 23:56:50.000000000 +0200
+++ minix_source/usr/src/minix/include/minix/ipc.h	2023-06-04 20:47:34.431433875 +0200
@@ -6,6 +6,7 @@
 #include <minix/const.h>
 #include <sys/signal.h>
 #include <sys/types.h>
+#include <stdbool.h>
 
 /*==========================================================================* 
  * Types relating to messages. 						    *
@@ -978,8 +979,10 @@ typedef struct {
 	int priority;
 	int quantum;
 	int cpu;
+	int64_t deadline;
+	int64_t estimate;
 
-	uint8_t padding[36];
+	uint8_t padding[20];
 } mess_lsys_krn_schedctl;
 _ASSERT_MSG_SIZE(mess_lsys_krn_schedctl);
 
@@ -988,8 +991,10 @@ typedef struct {
 	int quantum;
 	int priority;
 	int cpu;
+	int64_t deadline;
+	int64_t estimate;
 
-	uint8_t padding[40];
+	uint8_t padding[24];
 } mess_lsys_krn_schedule;
 _ASSERT_MSG_SIZE(mess_lsys_krn_schedule);
 
@@ -2024,6 +2029,25 @@ typedef struct {
 _ASSERT_MSG_SIZE(mess_vmmcp_reply);
 
 typedef struct {
+	int who;
+	int64_t deadline;
+	int64_t estimate;
+	bool kill;
+	uint8_t padding[35];
+} mess_sched_deadline;
+_ASSERT_MSG_SIZE(mess_sched_deadline);
+
+typedef struct {
+	endpoint_t endpoint;
+	int64_t deadline;
+	int64_t estimate;
+	bool kill;
+
+	uint8_t padding[35];
+} mess_pm_sched_scheduling_sched_deadline;
+_ASSERT_MSG_SIZE(mess_pm_sched_scheduling_sched_deadline);
+
+typedef struct {
 	endpoint_t m_source;		/* who sent the message */
 	int m_type;			/* what kind of message is it */
 	union {
@@ -2251,6 +2275,8 @@ typedef struct {
 		mess_vm_vfs_mmap	m_vm_vfs_mmap;
 		mess_vmmcp		m_vmmcp;
 		mess_vmmcp_reply	m_vmmcp_reply;
+		mess_sched_deadline m_sched_deadline;
+		mess_pm_sched_scheduling_sched_deadline m_pm_sched_scheduling_sched_deadline;
 
 		u8_t size[56];	/* message payload may have 56 bytes at most */
 	};
diff '--color=auto' -rupNEZbB minix_source_clean/usr/src/minix/include/minix/syslib.h minix_source/usr/src/minix/include/minix/syslib.h
--- minix_source_clean/usr/src/minix/include/minix/syslib.h	2014-09-13 23:56:50.000000000 +0200
+++ minix_source/usr/src/minix/include/minix/syslib.h	2023-06-04 20:49:07.471432837 +0200
@@ -38,9 +38,9 @@ int sys_exit(void);
 int sys_trace(int req, endpoint_t proc_ep, long addr, long *data_p);
 
 int sys_schedule(endpoint_t proc_ep, int priority, int quantum, int
-	cpu);
+	cpu, int64_t deadline, int64_t estimate);
 int sys_schedctl(unsigned flags, endpoint_t proc_ep, int priority, int
-	quantum, int cpu);
+	quantum, int cpu, int64_t deadline, int64_t estimate);
 
 /* Shorthands for sys_runctl() system call. */
 #define sys_stop(proc_ep) sys_runctl(proc_ep, RC_STOP, 0)
diff '--color=auto' -rupNEZbB minix_source_clean/usr/src/minix/kernel/proc.c minix_source/usr/src/minix/kernel/proc.c
--- minix_source_clean/usr/src/minix/kernel/proc.c	2014-09-13 23:56:50.000000000 +0200
+++ minix_source/usr/src/minix/kernel/proc.c	2023-06-04 23:25:58.581298953 +0200
@@ -36,6 +36,7 @@
 #include <assert.h>
 #include <string.h>
 
+#include "kernel/system.h"
 #include "kernel/kernel.h"
 #include "vm.h"
 #include "clock.h"
@@ -1546,6 +1547,7 @@ void enqueue(
   rdy_tail = get_cpu_var(rp->p_cpu, run_q_tail);
 
   /* Now add the process to the queue. */
+  if (rp->p_priority != DEADLINE_Q || 1) {
   if (!rdy_head[q]) {		/* add to empty queue */
       rdy_head[q] = rdy_tail[q] = rp; 		/* create a new queue */
       rp->p_nextready = NULL;		/* mark new end */
@@ -1555,6 +1557,66 @@ void enqueue(
       rdy_tail[q] = rp;				/* set new queue tail */
       rp->p_nextready = NULL;		/* mark new end */
   }
+  } 
+  else {
+	if (!rdy_head[DEADLINE_Q]) {		/* add to empty queue */
+		rdy_head[DEADLINE_Q] = rdy_tail[DEADLINE_Q] = rp; 		/* create a new queue */
+		rp->p_nextready = NULL;		/* mark new end */
+	} else {
+		int64_t now = 1000 * boottime + 1000 * get_realtime() / system_hz;
+
+		bool found = 0;
+		int64_t estimate_sum = 0;
+		struct proc *q_iter = rdy_head[DEADLINE_Q];
+		struct proc *pos;
+		while (q_iter->p_nextready != rdy_tail[DEADLINE_Q]) {
+			estimate_sum += q_iter->p_estimate;
+			if (now + estimate_sum < rp->p_deadline) {
+				found = 1;
+				pos = q_iter;
+			}
+			else {
+				break;
+			}
+			q_iter = q_iter->p_nextready;
+		} 
+		if (found) {
+			q_iter = q_iter->p_nextready;
+		}
+		else {
+			q_iter = rdy_head[DEADLINE_Q];
+		}
+		while (q_iter != rdy_tail[DEADLINE_Q]) {
+			if (now + q_iter->p_estimate < q_iter->p_deadline && now + q_iter->p_deadline + rp->p_estimate >= q_iter->p_deadline) {
+				found = 0;
+				break;
+			}
+			q_iter = q_iter->p_nextready;
+		}
+		if (!found) {
+			q_iter = rdy_head[DEADLINE_Q];
+			while (q_iter != rdy_tail[DEADLINE_Q] && now + q_iter->p_estimate < rp->p_deadline) {
+				q_iter = q_iter->p_nextready;
+			}
+			while (q_iter->p_nextready != rdy_tail[DEADLINE_Q]) {
+				if (q_iter->p_estimate <= rp->p_estimate && q_iter->p_nextready->p_estimate >= rp->p_estimate) {
+					found = 1;
+					pos = q_iter;
+				}
+				q_iter = q_iter->p_nextready;
+			}
+		}
+		if (found) {
+			rp->p_nextready = pos->p_nextready;
+			pos->p_nextready = rp;
+		} 
+		else {
+			rdy_tail[DEADLINE_Q]->p_nextready = rp;		/* chain tail of queue */
+			rdy_tail[DEADLINE_Q] = rp;				/* set new queue tail */
+			rp->p_nextready = NULL;		/* mark new end */
+		}
+	}
+  }
 
   if (cpuid == rp->p_cpu) {
 	  /*
diff '--color=auto' -rupNEZbB minix_source_clean/usr/src/minix/kernel/proc.h minix_source/usr/src/minix/kernel/proc.h
--- minix_source_clean/usr/src/minix/kernel/proc.h	2014-09-13 23:56:50.000000000 +0200
+++ minix_source/usr/src/minix/kernel/proc.h	2023-06-04 20:45:16.481435142 +0200
@@ -131,6 +131,9 @@ struct proc {
 #if DEBUG_TRACE
   int p_schedules;
 #endif
+
+  int64_t p_deadline;		/* process deadline */
+  int64_t p_estimate;		/* process estimate time */
 };
 
 #endif /* __ASSEMBLY__ */
diff '--color=auto' -rupNEZbB minix_source_clean/usr/src/minix/kernel/proto.h minix_source/usr/src/minix/kernel/proto.h
--- minix_source_clean/usr/src/minix/kernel/proto.h	2014-09-13 23:56:50.000000000 +0200
+++ minix_source/usr/src/minix/kernel/proto.h	2023-06-04 20:45:21.511435070 +0200
@@ -99,7 +99,8 @@ void system_init(void);
 void clear_endpoint(struct proc *rc);
 void clear_ipc_refs(struct proc *rc, int caller_ret);
 void kernel_call_resume(struct proc *p);
-int sched_proc(struct proc *rp, int priority, int quantum, int cpu);
+int sched_proc(struct proc *rp, int priority, int quantum, int cpu, int64_t deadline, 
+			   int64_t estimate);
 
 /* system/do_vtimer.c */
 void vtimer_check(struct proc *rp);
diff '--color=auto' -rupNEZbB minix_source_clean/usr/src/minix/kernel/system/do_schedctl.c minix_source/usr/src/minix/kernel/system/do_schedctl.c
--- minix_source_clean/usr/src/minix/kernel/system/do_schedctl.c	2014-09-13 23:56:50.000000000 +0200
+++ minix_source/usr/src/minix/kernel/system/do_schedctl.c	2023-06-04 23:24:03.111300874 +0200
@@ -11,6 +11,7 @@ int do_schedctl(struct proc * caller, me
 	int priority, quantum, cpu;
 	int proc_nr;
 	int r;
+	int64_t deadline, estimate;
 
 	/* check parameter validity */
 	flags = m_ptr->m_lsys_krn_schedctl.flags;
@@ -32,9 +33,11 @@ int do_schedctl(struct proc * caller, me
 		priority = m_ptr->m_lsys_krn_schedctl.priority;
 		quantum = m_ptr->m_lsys_krn_schedctl.quantum;
 		cpu = m_ptr->m_lsys_krn_schedctl.cpu;
+		deadline = m_ptr->m_lsys_krn_schedctl.deadline;
+		estimate = m_ptr->m_lsys_krn_schedctl.estimate;
 
 		/* Try to schedule the process. */
-		if((r = sched_proc(p, priority, quantum, cpu) != OK))
+		if((r = sched_proc(p, priority, quantum, cpu, -1, -1) != OK))
 			return r;
 		p->p_scheduler = NULL;
 	} else {
diff '--color=auto' -rupNEZbB minix_source_clean/usr/src/minix/kernel/system/do_schedule.c minix_source/usr/src/minix/kernel/system/do_schedule.c
--- minix_source_clean/usr/src/minix/kernel/system/do_schedule.c	2014-09-13 23:56:50.000000000 +0200
+++ minix_source/usr/src/minix/kernel/system/do_schedule.c	2023-06-05 00:33:21.981244325 +0200
@@ -10,6 +10,7 @@ int do_schedule(struct proc * caller, me
 	struct proc *p;
 	int proc_nr;
 	int priority, quantum, cpu;
+	int64_t deadline, estimate;
 
 	if (!isokendpt(m_ptr->m_lsys_krn_schedule.endpoint, &proc_nr))
 		return EINVAL;
@@ -24,6 +25,8 @@ int do_schedule(struct proc * caller, me
 	priority = m_ptr->m_lsys_krn_schedule.priority;
 	quantum = m_ptr->m_lsys_krn_schedule.quantum;
 	cpu = m_ptr->m_lsys_krn_schedule.cpu;
+	deadline = m_ptr->m_lsys_krn_schedule.deadline;
+	estimate = m_ptr->m_lsys_krn_schedule.estimate;
 
-	return sched_proc(p, priority, quantum, cpu);
+	return sched_proc(p, priority, quantum, cpu, deadline, estimate);
 }
diff '--color=auto' -rupNEZbB minix_source_clean/usr/src/minix/kernel/system.c minix_source/usr/src/minix/kernel/system.c
--- minix_source_clean/usr/src/minix/kernel/system.c	2014-09-13 23:56:50.000000000 +0200
+++ minix_source/usr/src/minix/kernel/system.c	2023-06-05 00:33:17.961244380 +0200
@@ -621,7 +621,9 @@ void kernel_call_resume(struct proc *cal
 int sched_proc(struct proc *p,
 			int priority,
 			int quantum,
-			int cpu)
+			int cpu,
+      int64_t deadline,
+      int64_t estimate)
 {
 	/* Make sure the values given are within the allowed range.*/
 	if ((priority < TASK_Q && priority != -1) || priority > NR_SCHED_QUEUES)
@@ -665,6 +667,12 @@ int sched_proc(struct proc *p,
 		p->p_quantum_size_ms = quantum;
 		p->p_cpu_time_left = ms_2_cpu_time(quantum);
 	}
+
+  p->p_deadline = deadline;
+  if (p->p_deadline != -1) {
+    p->p_estimate = estimate;
+  }
+
 #ifdef CONFIG_SMP
 	if (cpu != -1)
 		p->p_cpu = cpu;
diff '--color=auto' -rupNEZbB minix_source_clean/usr/src/minix/lib/libsys/sched_start.c minix_source/usr/src/minix/lib/libsys/sched_start.c
--- minix_source_clean/usr/src/minix/lib/libsys/sched_start.c	2014-09-13 23:56:50.000000000 +0200
+++ minix_source/usr/src/minix/lib/libsys/sched_start.c	2023-06-04 10:23:54.190541165 +0200
@@ -73,7 +73,7 @@ int sched_start(endpoint_t scheduler_e,
 	/* The KERNEL must schedule this process. */
 	if(scheduler_e == KERNEL) {
 		if ((rv = sys_schedctl(SCHEDCTL_FLAG_KERNEL, 
-			schedulee_e, maxprio, quantum, cpu)) != OK) {
+			schedulee_e, maxprio, quantum, cpu, -1, 0)) != OK) {
 			return rv;
 		}
 		*newscheduler_e = scheduler_e;
diff '--color=auto' -rupNEZbB minix_source_clean/usr/src/minix/lib/libsys/sys_schedctl.c minix_source/usr/src/minix/lib/libsys/sys_schedctl.c
--- minix_source_clean/usr/src/minix/lib/libsys/sys_schedctl.c	2014-09-13 23:56:50.000000000 +0200
+++ minix_source/usr/src/minix/lib/libsys/sys_schedctl.c	2023-06-04 20:45:57.991434620 +0200
@@ -1,7 +1,7 @@
 #include "syslib.h"
 
 int sys_schedctl(uint32_t flags, endpoint_t proc_ep, int priority, int quantum,
-	int cpu)
+	int cpu, int64_t deadline, int64_t estimate)
 {
 	message m;
 
@@ -10,6 +10,8 @@ int sys_schedctl(uint32_t flags, endpoin
 	m.m_lsys_krn_schedctl.priority = priority;
 	m.m_lsys_krn_schedctl.quantum = quantum;
 	m.m_lsys_krn_schedctl.cpu = cpu;
+	m.m_lsys_krn_schedctl.deadline = deadline;
+	m.m_lsys_krn_schedctl.estimate = estimate;
 
 	return(_kernel_call(SYS_SCHEDCTL, &m));
 }
diff '--color=auto' -rupNEZbB minix_source_clean/usr/src/minix/lib/libsys/sys_schedule.c minix_source/usr/src/minix/lib/libsys/sys_schedule.c
--- minix_source_clean/usr/src/minix/lib/libsys/sys_schedule.c	2014-09-13 23:56:50.000000000 +0200
+++ minix_source/usr/src/minix/lib/libsys/sys_schedule.c	2023-06-05 00:33:25.211244278 +0200
@@ -3,7 +3,9 @@
 int sys_schedule(endpoint_t proc_ep,
 			int priority,
 			int quantum,
-			int cpu)
+			int cpu,
+			int64_t deadline,
+			int64_t estimate)
 {
 	message m;
 
@@ -11,5 +13,8 @@ int sys_schedule(endpoint_t proc_ep,
 	m.m_lsys_krn_schedule.priority = priority;
 	m.m_lsys_krn_schedule.quantum  = quantum;
 	m.m_lsys_krn_schedule.cpu = cpu;
+	m.m_lsys_krn_schedule.deadline = deadline;
+	m.m_lsys_krn_schedule.estimate = estimate;
+
 	return(_kernel_call(SYS_SCHEDULE, &m));
 }
diff '--color=auto' -rupNEZbB minix_source_clean/usr/src/minix/servers/pm/proto.h minix_source/usr/src/minix/servers/pm/proto.h
--- minix_source_clean/usr/src/minix/servers/pm/proto.h	2014-09-13 23:56:50.000000000 +0200
+++ minix_source/usr/src/minix/servers/pm/proto.h	2023-06-03 21:09:48.076369920 +0200
@@ -51,6 +51,7 @@ int do_getrusage(void);
 void sched_init(void);
 int sched_start_user(endpoint_t ep, struct mproc *rmp);
 int sched_nice(struct mproc *rmp, int nice);
+int do_sched_deadline(void);
 
 /* profile.c */
 int do_sprofile(void);
diff '--color=auto' -rupNEZbB minix_source_clean/usr/src/minix/servers/pm/schedule.c minix_source/usr/src/minix/servers/pm/schedule.c
--- minix_source_clean/usr/src/minix/servers/pm/schedule.c	2014-09-13 23:56:50.000000000 +0200
+++ minix_source/usr/src/minix/servers/pm/schedule.c	2023-06-05 00:41:22.241236060 +0200
@@ -110,3 +110,37 @@ int sched_nice(struct mproc *rmp, int ni
 
 	return (OK);
 }
+
+/*===========================================================================*
+ *				do_sched_deadline				     *
+ *===========================================================================*/
+int do_sched_deadline(void) {
+	int arg_who = m_in.m_sched_deadline.who;
+	int64_t arg_deadline = m_in.m_sched_deadline.deadline;
+	int64_t arg_estimate = m_in.m_sched_deadline.estimate;
+	bool arg_kill = m_in.m_sched_deadline.kill;
+
+	struct mproc *rmp;
+
+	rmp = mp;
+
+	int rv;
+	message m;
+
+	/* check if the process is scheduled directly by the kernel */
+	if (rmp->mp_scheduler == KERNEL || rmp->mp_scheduler == NONE) {
+		return (EPERM);
+	}
+
+	m.m_pm_sched_scheduling_sched_deadline.endpoint	= rmp->mp_endpoint;
+	m.m_pm_sched_scheduling_sched_deadline.deadline	= arg_deadline;
+	m.m_pm_sched_scheduling_sched_deadline.estimate	= arg_estimate;
+	m.m_pm_sched_scheduling_sched_deadline.kill		= arg_kill;
+
+	if ((rv = _taskcall(rmp->mp_scheduler, SCHEDULING_SCHED_DEADLINE, &m))) {
+		return rv;
+	}
+
+	return (OK);
+
+}
\ No newline at end of file
diff '--color=auto' -rupNEZbB minix_source_clean/usr/src/minix/servers/pm/table.c minix_source/usr/src/minix/servers/pm/table.c
--- minix_source_clean/usr/src/minix/servers/pm/table.c	2014-09-13 23:56:50.000000000 +0200
+++ minix_source/usr/src/minix/servers/pm/table.c	2023-06-03 22:51:58.146283441 +0200
@@ -58,5 +58,6 @@ int (* const call_vec[NR_PM_CALLS])(void
 	CALL(PM_EXEC_RESTART)	= do_execrestart,
 	CALL(PM_GETEPINFO)	= do_getepinfo,		/* getepinfo(2) */
 	CALL(PM_GETPROCNR)	= do_getprocnr,		/* getprocnr(2) */
-	CALL(PM_GETSYSINFO)	= do_getsysinfo		/* getsysinfo(2) */
+	CALL(PM_GETSYSINFO)	= do_getsysinfo, 	/* getsysinfo(2) */
+	CALL(PM_SCHED_DEADLINE) = do_sched_deadline	/* sched_deadline(2) */
 };
diff '--color=auto' -rupNEZbB minix_source_clean/usr/src/minix/servers/sched/main.c minix_source/usr/src/minix/servers/sched/main.c
--- minix_source_clean/usr/src/minix/servers/sched/main.c	2014-09-13 23:56:50.000000000 +0200
+++ minix_source/usr/src/minix/servers/sched/main.c	2023-06-04 08:01:39.660665423 +0200
@@ -87,6 +87,9 @@ int main(void)
 				result = EPERM;
 			}
 			break;
+		case SCHEDULING_SCHED_DEADLINE:
+			result = do_deadline(&m_in);
+			break;
 		default:
 			result = no_sys(who_e, call_nr);
 		}
diff '--color=auto' -rupNEZbB minix_source_clean/usr/src/minix/servers/sched/proto.h minix_source/usr/src/minix/servers/sched/proto.h
--- minix_source_clean/usr/src/minix/servers/sched/proto.h	2014-09-13 23:56:50.000000000 +0200
+++ minix_source/usr/src/minix/servers/sched/proto.h	2023-06-04 08:03:56.980664018 +0200
@@ -13,6 +13,7 @@ int do_start_scheduling(message *m_ptr);
 int do_stop_scheduling(message *m_ptr);
 int do_nice(message *m_ptr);
 void init_scheduling(void);
+int do_deadline(message *m_ptr);
 
 /* utility.c */
 int no_sys(int who_e, int call_nr);
diff '--color=auto' -rupNEZbB minix_source_clean/usr/src/minix/servers/sched/schedproc.h minix_source/usr/src/minix/servers/sched/schedproc.h
--- minix_source_clean/usr/src/minix/servers/sched/schedproc.h	2014-09-13 23:56:50.000000000 +0200
+++ minix_source/usr/src/minix/servers/sched/schedproc.h	2023-06-04 21:24:41.591396504 +0200
@@ -2,6 +2,8 @@
  * for each process.
  */
 #include <limits.h>
+#include <stdint.h>
+#include <stdbool.h>
 
 #include <minix/bitmap.h>
 
@@ -33,6 +35,10 @@ EXTERN struct schedproc {
 	bitchunk_t cpu_mask[BITMAP_CHUNKS(CONFIG_MAX_CPUS)]; /* what CPUs is the
 								process allowed
 								to run on */
+	unsigned last_priority;
+	int64_t deadline;		/* deadline for the process */
+	int64_t estimate;		/* estimate for the process */
+	bool kill;			/* kill the process if it misses its deadline */
 } schedproc[NR_PROCS];
 
 /* Flag values */
diff '--color=auto' -rupNEZbB minix_source_clean/usr/src/minix/servers/sched/schedule.c minix_source/usr/src/minix/servers/sched/schedule.c
--- minix_source_clean/usr/src/minix/servers/sched/schedule.c	2014-09-13 23:56:50.000000000 +0200
+++ minix_source/usr/src/minix/servers/sched/schedule.c	2023-06-05 00:47:00.551232024 +0200
@@ -101,6 +101,23 @@ int do_noquantum(message *m_ptr)
 	rmp = &schedproc[proc_nr_n];
 	if (rmp->priority < MIN_USER_Q) {
 		rmp->priority += 1; /* lower priority */
+		if (rmp->priority >= DEADLINE_Q) {
+			rmp->priority += 1;
+		}
+	}
+
+	if (rmp->priority == DEADLINE_Q) {
+		printf("skończył się ktoś z ddq, zostało mu: %lld\n", rmp->estimate);
+		rmp->estimate -= rmp->time_slice;
+		if (rmp->estimate < 0) {
+			if (rmp->kill) {
+				/* kill the process */
+				printf("SCHED: killing process %d\n", proc_nr_n);
+				sys_kill(proc_nr_n, SIGKILL);
+			} else {
+				rmp->priority = PENALTY_Q;
+			}
+		}
 	}
 
 	if ((rv = schedule_process_local(rmp)) != OK) {
@@ -208,7 +225,11 @@ int do_start_scheduling(message *m_ptr)
 			return rv;
 
 		rmp->priority = schedproc[parent_nr_n].priority;
+		rmp->last_priority = schedproc[parent_nr_n].last_priority;
 		rmp->time_slice = schedproc[parent_nr_n].time_slice;
+		rmp->deadline = schedproc[parent_nr_n].deadline;
+		rmp->kill = schedproc[parent_nr_n].kill;
+		rmp->estimate = schedproc[parent_nr_n].estimate;
 		break;
 		
 	default: 
@@ -218,7 +239,7 @@ int do_start_scheduling(message *m_ptr)
 
 	/* Take over scheduling the process. The kernel reply message populates
 	 * the processes current priority and its time slice */
-	if ((rv = sys_schedctl(0, rmp->endpoint, 0, 0, 0)) != OK) {
+	if ((rv = sys_schedctl(0, rmp->endpoint, 0, 0, 0, -1, 0)) != OK) {
 		printf("Sched: Error taking over scheduling for %d, kernel said %d\n",
 			rmp->endpoint, rv);
 		return rv;
@@ -256,42 +277,52 @@ int do_start_scheduling(message *m_ptr)
  *===========================================================================*/
 int do_nice(message *m_ptr)
 {
-	struct schedproc *rmp;
-	int rv;
-	int proc_nr_n;
-	unsigned new_q, old_q, old_max_q;
+	// struct schedproc *rmp;
+	// int rv;
+	// int proc_nr_n;
+	// unsigned new_q, old_q, old_max_q;
+
+	// /* check who can send you requests */
+	// if (!accept_message(m_ptr))
+	// 	return EPERM;
+
+	// if (sched_isokendpt(m_ptr->m_pm_sched_scheduling_set_nice.endpoint, &proc_nr_n) != OK) {
+	// 	printf("SCHED: WARNING: got an invalid endpoint in OoQ msg "
+	// 	"%d\n", m_ptr->m_pm_sched_scheduling_set_nice.endpoint);
+	// 	return EBADEPT;
+	// }
+
+	// rmp = &schedproc[proc_nr_n];
+
+	// if (rmp->priority == DEADLINE_Q) {
+	// 	return EINVAL;
+	// }
+
+	// new_q = m_ptr->m_pm_sched_scheduling_set_nice.maxprio;
+	// if (new_q >= NR_SCHED_QUEUES) {
+	// 	return EINVAL;
+	// }
+
+	// if (new_q == DEADLINE_Q) {
+	// 	return EINVAL;
+	// }
+
+	// /* Store old values, in case we need to roll back the changes */
+	// old_q     = rmp->priority;
+	// old_max_q = rmp->max_priority;
+
+	// /* Update the proc entry and reschedule the process */
+	// rmp->max_priority = rmp->priority = new_q;
+
+	// if ((rv = schedule_process_local(rmp)) != OK) {
+	// 	/* Something went wrong when rescheduling the process, roll
+	// 	 * back the changes to proc struct */
+	// 	rmp->priority     = old_q;
+	// 	rmp->max_priority = old_max_q;
+	// }
 
-	/* check who can send you requests */
-	if (!accept_message(m_ptr))
-		return EPERM;
-
-	if (sched_isokendpt(m_ptr->m_pm_sched_scheduling_set_nice.endpoint, &proc_nr_n) != OK) {
-		printf("SCHED: WARNING: got an invalid endpoint in OoQ msg "
-		"%d\n", m_ptr->m_pm_sched_scheduling_set_nice.endpoint);
-		return EBADEPT;
-	}
-
-	rmp = &schedproc[proc_nr_n];
-	new_q = m_ptr->m_pm_sched_scheduling_set_nice.maxprio;
-	if (new_q >= NR_SCHED_QUEUES) {
-		return EINVAL;
-	}
-
-	/* Store old values, in case we need to roll back the changes */
-	old_q     = rmp->priority;
-	old_max_q = rmp->max_priority;
-
-	/* Update the proc entry and reschedule the process */
-	rmp->max_priority = rmp->priority = new_q;
-
-	if ((rv = schedule_process_local(rmp)) != OK) {
-		/* Something went wrong when rescheduling the process, roll
-		 * back the changes to proc struct */
-		rmp->priority     = old_q;
-		rmp->max_priority = old_max_q;
-	}
-
-	return rv;
+	// return rv;
+	return OK;
 }
 
 /*===========================================================================*
@@ -301,6 +332,7 @@ static int schedule_process(struct sched
 {
 	int err;
 	int new_prio, new_quantum, new_cpu;
+	int64_t new_deadline, new_estimate;
 
 	pick_cpu(rmp);
 
@@ -319,8 +351,11 @@ static int schedule_process(struct sched
 	else
 		new_cpu = -1;
 
+	new_deadline = rmp->deadline;
+	new_estimate = rmp->estimate;
+
 	if ((err = sys_schedule(rmp->endpoint, new_prio,
-		new_quantum, new_cpu)) != OK) {
+		new_quantum, new_cpu, new_deadline, new_estimate)) != OK) {
 		printf("PM: An error occurred when trying to schedule %d: %d\n",
 		rmp->endpoint, err);
 	}
@@ -356,8 +391,14 @@ static void balance_queues(minix_timer_t
 
 	for (proc_nr=0, rmp=schedproc; proc_nr < NR_PROCS; proc_nr++, rmp++) {
 		if (rmp->flags & IN_USE) {
-			if (rmp->priority > rmp->max_priority) {
+			if (rmp->priority > rmp->max_priority && rmp->priority != DEADLINE_Q) {
 				rmp->priority -= 1; /* increase priority */
+				if (rmp->priority == DEADLINE_Q) {
+					rmp->priority -= 1;
+				}
+				if (rmp->priority < rmp->max_priority) {
+					rmp->priority += 2;
+				}
 				schedule_process_local(rmp);
 			}
 		}
@@ -365,3 +406,74 @@ static void balance_queues(minix_timer_t
 
 	set_timer(&sched_timer, balance_timeout, balance_queues, 0);
 }
+
+/*===========================================================================*
+ *				do_sched_deadline				     *
+ *===========================================================================*/
+int do_deadline(message *m_ptr)
+{
+	struct schedproc *rmp;
+	int rv;
+	int proc_nr_n;
+	int64_t new_deadline, old_deadline;
+	int64_t new_estimate, old_estimate;
+	bool new_kill, old_kill;
+
+	if (sched_isokendpt(m_ptr->m_pm_sched_scheduling_sched_deadline.endpoint, &proc_nr_n) != OK) {
+		printf("SCHED: WARNING: got an invalid endpoint in OoQ msg "
+		"%d\n", m_ptr->m_pm_sched_scheduling_sched_deadline.endpoint);
+		return EBADEPT;
+	}
+
+	new_deadline = m_ptr->m_pm_sched_scheduling_sched_deadline.deadline;
+	new_estimate = m_ptr->m_pm_sched_scheduling_sched_deadline.estimate;
+	new_kill = m_ptr->m_pm_sched_scheduling_sched_deadline.kill;
+
+	clock_t ticks, real_time;
+	time_t boottime;
+	getuptime(&ticks, &real_time, &boottime);
+	int64_t now = (int64_t) 1000 * real_time / sys_hz() + (int64_t) boottime * 1000;
+
+	if (new_deadline != -1 && new_deadline < now + new_estimate) {
+		return EINVAL;
+	}
+
+	if (new_estimate <= 0) {
+		return EINVAL;
+	} 
+
+
+	rmp = &schedproc[proc_nr_n];
+	if ((rmp->deadline == -1 && new_deadline == -1) || 
+		(rmp->priority == DEADLINE_Q && new_deadline != -1)) {
+		return EPERM;
+	}
+
+	old_deadline = rmp->deadline;
+	old_estimate = rmp->estimate;
+	old_kill = rmp->kill;
+
+	if (new_deadline == -1) {
+		rmp->priority = rmp->last_priority;
+		rmp->deadline = new_deadline;
+	} 
+	else {
+		rmp->deadline = new_deadline;
+		rmp->estimate = new_estimate;
+		rmp->kill = new_kill;
+
+		rmp->last_priority = rmp->priority;
+		rmp->priority = DEADLINE_Q;
+	}
+
+	printf("sched prior: %d\n", rmp->priority);
+
+	if ((rv = schedule_process_local(rmp)) != OK) {
+		rmp->deadline = old_deadline;
+		rmp->estimate = old_estimate;
+		rmp->kill = old_kill;
+		return rv;
+	}
+
+	return OK;
+}
\ No newline at end of file
